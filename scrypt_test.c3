module scrypt::test @test;
import std::io;
import std::hash::sha256, scrypt;

fn void test_salsa20_8() {
    // The input_block and output_block values are taken from
    // [RFC7914](https://datatracker.ietf.org/doc/html/rfc7914#section-8)
    // section 8.

    char[] input_block = {
           0x7e, 0x87, 0x9a, 0x21,   0x4f, 0x3e, 0xc9, 0x86,
           0x7c,  0xa9, 0x40, 0xe6,   0x41, 0x71, 0x8f, 0x26,
           0xba,  0xee, 0x55, 0x5b,   0x8c, 0x61, 0xc1, 0xb5,
           0x0d,  0xf8, 0x46, 0x11,   0x6d, 0xcd, 0x3b, 0x1d,
           0xee,  0x24, 0xf3, 0x19,   0xdf, 0x9b, 0x3d, 0x85,
           0x14,  0x12, 0x1e, 0x4b,   0x5a, 0xc5, 0xaa, 0x32,
           0x76,  0x02, 0x1d, 0x29,   0x09, 0xc7, 0x48, 0x29,
           0xed,  0xeb, 0xc6, 0x8d,   0xb8, 0xb8, 0xc2, 0x5e
    };

    char[] output_block = {
           0xa4, 0x1f, 0x85, 0x9c,   0x66, 0x08, 0xcc, 0x99,
           0x3b,  0x81, 0xca, 0xcb,   0x02, 0x0c, 0xef, 0x05,
           0x04,  0x4b, 0x21, 0x81,   0xa2, 0xfd, 0x33, 0x7d,
           0xfd,  0x7b, 0x1c, 0x63,   0x96, 0x68, 0x2f, 0x29,
           0xb4,  0x39, 0x31, 0x68,   0xe3, 0xc9, 0xe6, 0xbc,
           0xfe,  0x6b, 0xc5, 0xb7,   0xa0, 0x6d, 0x96, 0xba,
           0xe4,  0x24, 0xcc, 0x10,   0x2c, 0x91, 0x74, 0x5c,
           0x24,  0xad, 0x67, 0x3d,   0xc7, 0x61, 0x8f, 0x81
    };
    

    scrypt::salsa20_8(input_block);
        
    for (int i = 0;i < 64; ++i) {    
        assert (input_block[i] == output_block[i], "assertion failed");
    }
}

fn void test_block_mix() {
    // The input_block and output_block values are taken from
    // [RFC7914](https://datatracker.ietf.org/doc/html/rfc7914#section-9)
    // section 9.

    char[] input_block = {
        // B[0] - the first 64 bytes of input
           0xf7, 0xce, 0x0b, 0x65,   0x3d, 0x2d, 0x72, 0xa4,
           0x10,  0x8c, 0xf5, 0xab,   0xe9, 0x12, 0xff, 0xdd,
           0x77,  0x76, 0x16, 0xdb,   0xbb, 0x27, 0xa7, 0x0e,
           0x82,  0x04, 0xf3, 0xae,   0x2d, 0x0f, 0x6f, 0xad,
           0x89,  0xf6, 0x8f, 0x48,   0x11, 0xd1, 0xe8, 0x7b,
           0xcc,  0x3b, 0xd7, 0x40,   0x0a, 0x9f, 0xfd, 0x29,
           0x09,  0x4f, 0x01, 0x84,   0x63, 0x95, 0x74, 0xf3,
           0x9a,  0xe5, 0xa1, 0x31,   0x52, 0x17, 0xbc, 0xd7,
        // B[1] - the second 64 bytes of input
           0x89,  0x49, 0x91, 0x44,   0x72, 0x13, 0xbb, 0x22,
           0x6c,  0x25, 0xb5, 0x4d,   0xa8, 0x63, 0x70, 0xfb,
           0xcd,  0x98, 0x43, 0x80,   0x37, 0x46, 0x66, 0xbb,
           0x8f,  0xfc, 0xb5, 0xbf,   0x40, 0xc2, 0x54, 0xb0,
           0x67,  0xd2, 0x7c, 0x51,   0xce, 0x4a, 0xd5, 0xfe,
           0xd8,  0x29, 0xc9, 0x0b,   0x50, 0x5a, 0x57, 0x1b,
           0x7f,  0x4d, 0x1c, 0xad,   0x6a, 0x52, 0x3c, 0xda,
           0x77,  0x0e, 0x67, 0xbc,   0xea, 0xaf, 0x7e, 0x89
    };

    char[] output_block = {
        // B"[0] - the first 64 bytes of output
           0xa4, 0x1f, 0x85, 0x9c,   0x66, 0x08, 0xcc, 0x99,
           0x3b,  0x81, 0xca, 0xcb,   0x02, 0x0c, 0xef, 0x05,
           0x04,  0x4b, 0x21, 0x81,   0xa2, 0xfd, 0x33, 0x7d,
           0xfd,  0x7b, 0x1c, 0x63,   0x96, 0x68, 0x2f, 0x29,
           0xb4,  0x39, 0x31, 0x68,   0xe3, 0xc9, 0xe6, 0xbc,
           0xfe,  0x6b, 0xc5, 0xb7,   0xa0, 0x6d, 0x96, 0xba,
           0xe4,  0x24, 0xcc, 0x10,   0x2c, 0x91, 0x74, 0x5c,
           0x24,  0xad, 0x67, 0x3d,   0xc7, 0x61, 0x8f, 0x81,
        // B"[1] - the second 64 bytes of output
           0x20,  0xed, 0xc9, 0x75,   0x32, 0x38, 0x81, 0xa8,
           0x05,  0x40, 0xf6, 0x4c,   0x16, 0x2d, 0xcd, 0x3c,
           0x21,  0x07, 0x7c, 0xfe,   0x5f, 0x8d, 0x5f, 0xe2,
           0xb1,  0xa4, 0x16, 0x8f,   0x95, 0x36, 0x78, 0xb7,
           0x7d,  0x3b, 0x3d, 0x80,   0x3b, 0x60, 0xe4, 0xab,
           0x92,  0x09, 0x96, 0xe5,   0x9b, 0x4d, 0x53, 0xb6,
           0x5d,  0x2a, 0x22, 0x58,   0x77, 0xd5, 0xed, 0xf5,
           0x84,  0x2c, 0xb9, 0xf1,   0x4e, 0xef, 0xe4, 0x25
    };

    // an array capable of holding r * 128 bytes used during
    // the block_mix operation.
    char[128] temp_block;

    // for this test, r = 1
    scrypt::block_mix(input_block, &temp_block, 1);

    for (int i = 0;i < 128; ++i) {    
        assert (input_block[i] == output_block[i], "assertion failed");
    }
}

fn void test_smix() {
    // The input_block and output_block values are taken from
    // [RFC7914](https://datatracker.ietf.org/doc/html/rfc7914#section-10)
    // section 10.

    // vfmt off
    char[]  input_block = {
           0xf7, 0xce, 0x0b, 0x65,   0x3d, 0x2d, 0x72, 0xa4,
           0x10,  0x8c, 0xf5, 0xab,   0xe9, 0x12, 0xff, 0xdd,
           0x77,  0x76, 0x16, 0xdb,   0xbb, 0x27, 0xa7, 0x0e,
           0x82,  0x04, 0xf3, 0xae,   0x2d, 0x0f, 0x6f, 0xad,
           0x89,  0xf6, 0x8f, 0x48,   0x11, 0xd1, 0xe8, 0x7b,
           0xcc,  0x3b, 0xd7, 0x40,   0x0a, 0x9f, 0xfd, 0x29,
           0x09,  0x4f, 0x01, 0x84,   0x63, 0x95, 0x74, 0xf3,
           0x9a,  0xe5, 0xa1, 0x31,   0x52, 0x17, 0xbc, 0xd7,
           0x89,  0x49, 0x91, 0x44,   0x72, 0x13, 0xbb, 0x22,
           0x6c,  0x25, 0xb5, 0x4d,   0xa8, 0x63, 0x70, 0xfb,
           0xcd,  0x98, 0x43, 0x80,   0x37, 0x46, 0x66, 0xbb,
           0x8f,  0xfc, 0xb5, 0xbf,   0x40, 0xc2, 0x54, 0xb0,
           0x67,  0xd2, 0x7c, 0x51,   0xce, 0x4a, 0xd5, 0xfe,
           0xd8,  0x29, 0xc9, 0x0b,   0x50, 0x5a, 0x57, 0x1b,
           0x7f,  0x4d, 0x1c, 0xad,   0x6a, 0x52, 0x3c, 0xda,
           0x77,  0x0e, 0x67, 0xbc,   0xea, 0xaf, 0x7e, 0x89
    };

    char[] output_block = {
           0x79, 0xcc, 0xc1, 0x93,   0x62, 0x9d, 0xeb, 0xca,
           0x04,  0x7f, 0x0b, 0x70,   0x60, 0x4b, 0xf6, 0xb6,
           0x2c,  0xe3, 0xdd, 0x4a,   0x96, 0x26, 0xe3, 0x55,
           0xfa,  0xfc, 0x61, 0x98,   0xe6, 0xea, 0x2b, 0x46,
           0xd5,  0x84, 0x13, 0x67,   0x3b, 0x99, 0xb0, 0x29,
           0xd6,  0x65, 0xc3, 0x57,   0x60, 0x1f, 0xb4, 0x26,
           0xa0,  0xb2, 0xf4, 0xbb,   0xa2, 0x00, 0xee, 0x9f,
           0x0a,  0x43, 0xd1, 0x9b,   0x57, 0x1a, 0x9c, 0x71,
           0xef,  0x11, 0x42, 0xe6,   0x5d, 0x5a, 0x26, 0x6f,
           0xdd,  0xca, 0x83, 0x2c,   0xe5, 0x9f, 0xaa, 0x7c,
           0xac,  0x0b, 0x9c, 0xf1,   0xbe, 0x2b, 0xff, 0xca,
           0x30,  0x0d, 0x01, 0xee,   0x38, 0x76, 0x19, 0xc4,
           0xae,  0x12, 0xfd, 0x44,   0x38, 0xf2, 0x03, 0xa0,
           0xe4,  0xe1, 0xc4, 0x7e,   0xc3, 0x14, 0x86, 0x1f,
           0x4e,  0x90, 0x87, 0xcb,   0x33, 0x39, 0x6a, 0x68,
           0x73,  0xe8, 0xf9, 0xd2,   0x53, 0x9a, 0x4b, 0x8e
    };

    int r = 1;
    ulong n = 16;

    // len and cap are 128 * r * n = 2048
    char[2048] v_block;

    // len and cap are 256 * r = 246
    char[256] temp_block;

    scrypt::smix(input_block, r, n, &v_block, &temp_block);

    for (int i = 0;i < 128; ++i) {    
        assert (input_block[i] == output_block[i], "assertion failed");
    }
}

fn void test_pbkdf2_hmac_sha256() {
    // The input_block and output_block values are taken from
    // [RFC7914](https://datatracker.ietf.org/doc/html/rfc7914#section-11)
    // section 11.
    char[][] output_block = {
        {   0x55, 0xac, 0x04, 0x6e,   0x56, 0xe3, 0x08, 0x9f,
            0xec,  0x16, 0x91, 0xc2,   0x25, 0x44, 0xb6, 0x05,
            0xf9,  0x41, 0x85, 0x21,   0x6d, 0xde, 0x04, 0x65,
            0xe6,  0x8b, 0x9d, 0x57,   0xc2, 0x0d, 0xac, 0xbc,
            0x49,  0xca, 0x9c, 0xcc,   0xf1, 0x79, 0xb6, 0x45,
            0x99,  0x16, 0x64, 0xb3,   0x9d, 0x77, 0xef, 0x31,
            0x7c,  0x71, 0xb8, 0x45,   0xb1, 0xe3, 0x0b, 0xd5,
            0x09,  0x11, 0x20, 0x41,   0xd3, 0xa1, 0x97, 0x83
        },
        {   0x4d, 0xdc, 0xd8, 0xf6,   0x0b, 0x98, 0xbe, 0x21,
            0x83,  0x0c, 0xee, 0x5e,   0xf2, 0x27, 0x01, 0xf9,
            0x64,  0x1a, 0x44, 0x18,   0xd0, 0x4c, 0x04, 0x14,
            0xae,  0xff, 0x08, 0x87,   0x6b, 0x34, 0xab, 0x56,
            0xa1,  0xd4, 0x25, 0xa1,   0x22, 0x58, 0x33, 0x54,
            0x9a,  0xdb, 0x84, 0x1b,   0x51, 0xc9, 0xb3, 0x17,
            0x6a,  0x27, 0x2b, 0xde,   0xbb, 0xa1, 0xd0, 0x78,
            0x47,  0x8f, 0x62, 0xb3,   0x97, 0xf3, 0x3c, 0x8d
        }
    };

    char[64] d0;
    sha256::pbkdf2("passwd", "salt", 1, &d0);

    assert (&d0 == output_block[0]);

    char[64] d1;
    sha256::pbkdf2("Password", "NaCl", 80000, &d1);    

    assert(&d1 == output_block[1]);
}

struct ScryptTestData {
    String name;
    char[] password;
    char[] salt;
    ulong n;
    uint r;
    uint p;
    ulong dk_len;
    char[] expected_result;
}

// The scrypt test vectors are taken from
// [RFC7914](https://datatracker.ietf.org/doc/html/rfc7914#section-12)
// section 12.
const ScryptTestData[] SCRYPT_TEST_CASES = {
    ScryptTestData{
        .name= "test case 1",
        .password= "",
        .salt= "",
        .n= 16,
        .r= 1,
        .p= 1,
        .dk_len = 64,
        .expected_result= {
            0x77, 0xd6, 0x57, 0x62, 0x38, 0x65, 0x7b, 0x20, 0x3b, 0x19, 0xca,
            0x42, 0xc1, 0x8a, 0x04, 0x97, 0xf1, 0x6b, 0x48, 0x44, 0xe3, 0x07, 0x4a, 0xe8, 0xdf,
            0xdf, 0xfa, 0x3f, 0xed, 0xe2, 0x14, 0x42, 0xfc, 0xd0, 0x06, 0x9d, 0xed, 0x09, 0x48,
            0xf8, 0x32, 0x6a, 0x75, 0x3a, 0x0f, 0xc8, 0x1f, 0x17, 0xe8, 0xd3, 0xe0, 0xfb, 0x2e,
            0x0d, 0x36, 0x28, 0xcf, 0x35, 0xe2, 0x0c, 0x38, 0xd1, 0x89, 0x06
        }
    },
    ScryptTestData{
        .name=            "test case 2",
        .password=        "password",
        .salt=            "NaCl",
        .n=               1024,
        .r=               8,
        .p=               16,
        .dk_len=          64,
        .expected_result= {
            0xfd, 0xba, 0xbe, 0x1c, 0x9d, 0x34, 0x72, 0x00, 0x78, 0x56, 0xe7,
            0x19, 0x0d, 0x01, 0xe9, 0xfe, 0x7c, 0x6a, 0xd7, 0xcb, 0xc8, 0x23, 0x78, 0x30, 0xe7,
            0x73, 0x76, 0x63, 0x4b, 0x37, 0x31, 0x62, 0x2e, 0xaf, 0x30, 0xd9, 0x2e, 0x22, 0xa3,
            0x88, 0x6f, 0xf1, 0x09, 0x27, 0x9d, 0x98, 0x30, 0xda, 0xc7, 0x27, 0xaf, 0xb9, 0x4a,
            0x83, 0xee, 0x6d, 0x83, 0x60, 0xcb, 0xdf, 0xa2, 0xcc, 0x06, 0x40
        },
    },
    ScryptTestData{
        .name=            "test case 3",
        .password=        "pleaseletmein",
        .salt=            "SodiumChloride",
        .n=               16384,
        .r=               8,
        .p=               1,
        .dk_len=          64,
        .expected_result= {
            0x70, 0x23, 0xbd, 0xcb, 0x3a, 0xfd, 0x73, 0x48, 0x46, 0x1c, 0x06,
            0xcd, 0x81, 0xfd, 0x38, 0xeb, 0xfd, 0xa8, 0xfb, 0xba, 0x90, 0x4f, 0x8e, 0x3e, 0xa9,
            0xb5, 0x43, 0xf6, 0x54, 0x5d, 0xa1, 0xf2, 0xd5, 0x43, 0x29, 0x55, 0x61, 0x3f, 0x0f,
            0xcf, 0x62, 0xd4, 0x97, 0x05, 0x24, 0x2a, 0x9a, 0xf9, 0xe6, 0x1e, 0x85, 0xdc, 0x0d,
            0x65, 0x1e, 0x40, 0xdf, 0xcf, 0x01, 0x7b, 0x45, 0x57, 0x58, 0x87
        }
    },
    ScryptTestData{
        .name=            "test case 3",
        .password=        "pleaseletmein",
        .salt=            "SodiumChloride",
        .n=               1048576,
        .r=               8,
        .p=               1,
        .dk_len=          64,
        .expected_result= {
            0x21, 0x01, 0xcb, 0x9b, 0x6a, 0x51, 0x1a, 0xae, 0xad, 0xdb, 0xbe,
            0x09, 0xcf, 0x70, 0xf8, 0x81, 0xec, 0x56, 0x8d, 0x57, 0x4a, 0x2f, 0xfd, 0x4d, 0xab,
            0xe5, 0xee, 0x98, 0x20, 0xad, 0xaa, 0x47, 0x8e, 0x56, 0xfd, 0x8f, 0x4b, 0xa5, 0xd0,
            0x9f, 0xfa, 0x1c, 0x6d, 0x92, 0x7c, 0x40, 0xf4, 0xc3, 0x37, 0x30, 0x40, 0x49, 0xe8,
            0xa9, 0x52, 0xfb, 0xcb, 0xf4, 0x5c, 0x6f, 0xa7, 0x7a, 0x41, 0xa4
        }
    },
};

fn void test_scrypt() {
    foreach(c : SCRYPT_TEST_CASES) {
        char[] results = scrypt::scrypt(c.password, c.salt, c.n, c.r, c.p, c.dk_len)!;

        assert (results == c.expected_result);
    }
}
